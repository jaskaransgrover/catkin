// Generated by gencpp from file robosar_messages/agent_statusResponse.msg
// DO NOT EDIT!


#ifndef ROBOSAR_MESSAGES_MESSAGE_AGENT_STATUSRESPONSE_H
#define ROBOSAR_MESSAGES_MESSAGE_AGENT_STATUSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robosar_messages
{
template <class ContainerAllocator>
struct agent_statusResponse_
{
  typedef agent_statusResponse_<ContainerAllocator> Type;

  agent_statusResponse_()
    : agents_active()  {
    }
  agent_statusResponse_(const ContainerAllocator& _alloc)
    : agents_active(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _agents_active_type;
  _agents_active_type agents_active;





  typedef boost::shared_ptr< ::robosar_messages::agent_statusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosar_messages::agent_statusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct agent_statusResponse_

typedef ::robosar_messages::agent_statusResponse_<std::allocator<void> > agent_statusResponse;

typedef boost::shared_ptr< ::robosar_messages::agent_statusResponse > agent_statusResponsePtr;
typedef boost::shared_ptr< ::robosar_messages::agent_statusResponse const> agent_statusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosar_messages::agent_statusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robosar_messages::agent_statusResponse_<ContainerAllocator1> & lhs, const ::robosar_messages::agent_statusResponse_<ContainerAllocator2> & rhs)
{
  return lhs.agents_active == rhs.agents_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robosar_messages::agent_statusResponse_<ContainerAllocator1> & lhs, const ::robosar_messages::agent_statusResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robosar_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosar_messages::agent_statusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosar_messages::agent_statusResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosar_messages::agent_statusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e11fd7ffef74f85ca9b7e06e813c80a";
  }

  static const char* value(const ::robosar_messages::agent_statusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e11fd7ffef74f85ULL;
  static const uint64_t static_value2 = 0xca9b7e06e813c80aULL;
};

template<class ContainerAllocator>
struct DataType< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosar_messages/agent_statusResponse";
  }

  static const char* value(const ::robosar_messages::agent_statusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] agents_active\n"
;
  }

  static const char* value(const ::robosar_messages::agent_statusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agents_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct agent_statusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosar_messages::agent_statusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosar_messages::agent_statusResponse_<ContainerAllocator>& v)
  {
    s << indent << "agents_active[]" << std::endl;
    for (size_t i = 0; i < v.agents_active.size(); ++i)
    {
      s << indent << "  agents_active[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agents_active[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSAR_MESSAGES_MESSAGE_AGENT_STATUSRESPONSE_H
