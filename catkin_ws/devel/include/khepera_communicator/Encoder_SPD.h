// Generated by gencpp from file khepera_communicator/Encoder_SPD.msg
// DO NOT EDIT!


#ifndef KHEPERA_COMMUNICATOR_MESSAGE_ENCODER_SPD_H
#define KHEPERA_COMMUNICATOR_MESSAGE_ENCODER_SPD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace khepera_communicator
{
template <class ContainerAllocator>
struct Encoder_SPD_
{
  typedef Encoder_SPD_<ContainerAllocator> Type;

  Encoder_SPD_()
    : spd_L(0)
    , spd_R(0)  {
    }
  Encoder_SPD_(const ContainerAllocator& _alloc)
    : spd_L(0)
    , spd_R(0)  {
  (void)_alloc;
    }



   typedef int64_t _spd_L_type;
  _spd_L_type spd_L;

   typedef int64_t _spd_R_type;
  _spd_R_type spd_R;





  typedef boost::shared_ptr< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_SPD_

typedef ::khepera_communicator::Encoder_SPD_<std::allocator<void> > Encoder_SPD;

typedef boost::shared_ptr< ::khepera_communicator::Encoder_SPD > Encoder_SPDPtr;
typedef boost::shared_ptr< ::khepera_communicator::Encoder_SPD const> Encoder_SPDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::khepera_communicator::Encoder_SPD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::khepera_communicator::Encoder_SPD_<ContainerAllocator1> & lhs, const ::khepera_communicator::Encoder_SPD_<ContainerAllocator2> & rhs)
{
  return lhs.spd_L == rhs.spd_L &&
    lhs.spd_R == rhs.spd_R;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::khepera_communicator::Encoder_SPD_<ContainerAllocator1> & lhs, const ::khepera_communicator::Encoder_SPD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace khepera_communicator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b3c260c3bd3547108ca8206192d86e1";
  }

  static const char* value(const ::khepera_communicator::Encoder_SPD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b3c260c3bd35471ULL;
  static const uint64_t static_value2 = 0x08ca8206192d86e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "khepera_communicator/Encoder_SPD";
  }

  static const char* value(const ::khepera_communicator::Encoder_SPD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 spd_L\n"
"int64 spd_R\n"
;
  }

  static const char* value(const ::khepera_communicator::Encoder_SPD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.spd_L);
      stream.next(m.spd_R);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_SPD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::khepera_communicator::Encoder_SPD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::khepera_communicator::Encoder_SPD_<ContainerAllocator>& v)
  {
    s << indent << "spd_L: ";
    Printer<int64_t>::stream(s, indent + "  ", v.spd_L);
    s << indent << "spd_R: ";
    Printer<int64_t>::stream(s, indent + "  ", v.spd_R);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KHEPERA_COMMUNICATOR_MESSAGE_ENCODER_SPD_H
