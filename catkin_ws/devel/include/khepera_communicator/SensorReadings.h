// Generated by gencpp from file khepera_communicator/SensorReadings.msg
// DO NOT EDIT!


#ifndef KHEPERA_COMMUNICATOR_MESSAGE_SENSORREADINGS_H
#define KHEPERA_COMMUNICATOR_MESSAGE_SENSORREADINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace khepera_communicator
{
template <class ContainerAllocator>
struct SensorReadings_
{
  typedef SensorReadings_<ContainerAllocator> Type;

  SensorReadings_()
    : acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , pos_L(0)
    , pos_R(0)
    , spd_L(0)
    , spd_R(0)
    , time(0.0)  {
    }
  SensorReadings_(const ContainerAllocator& _alloc)
    : acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , pos_L(0)
    , pos_R(0)
    , spd_L(0)
    , spd_R(0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef int64_t _pos_L_type;
  _pos_L_type pos_L;

   typedef int64_t _pos_R_type;
  _pos_R_type pos_R;

   typedef int64_t _spd_L_type;
  _spd_L_type spd_L;

   typedef int64_t _spd_R_type;
  _spd_R_type spd_R;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::khepera_communicator::SensorReadings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::khepera_communicator::SensorReadings_<ContainerAllocator> const> ConstPtr;

}; // struct SensorReadings_

typedef ::khepera_communicator::SensorReadings_<std::allocator<void> > SensorReadings;

typedef boost::shared_ptr< ::khepera_communicator::SensorReadings > SensorReadingsPtr;
typedef boost::shared_ptr< ::khepera_communicator::SensorReadings const> SensorReadingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::khepera_communicator::SensorReadings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::khepera_communicator::SensorReadings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::khepera_communicator::SensorReadings_<ContainerAllocator1> & lhs, const ::khepera_communicator::SensorReadings_<ContainerAllocator2> & rhs)
{
  return lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.pos_L == rhs.pos_L &&
    lhs.pos_R == rhs.pos_R &&
    lhs.spd_L == rhs.spd_L &&
    lhs.spd_R == rhs.spd_R &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::khepera_communicator::SensorReadings_<ContainerAllocator1> & lhs, const ::khepera_communicator::SensorReadings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace khepera_communicator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::SensorReadings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::SensorReadings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::SensorReadings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0d41b6d37358788208673918228ef9d";
  }

  static const char* value(const ::khepera_communicator::SensorReadings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0d41b6d37358788ULL;
  static const uint64_t static_value2 = 0x208673918228ef9dULL;
};

template<class ContainerAllocator>
struct DataType< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "khepera_communicator/SensorReadings";
  }

  static const char* value(const ::khepera_communicator::SensorReadings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 acc_x\n"
"float32 acc_y\n"
"float32 acc_z\n"
"float32 gyro_x\n"
"float32 gyro_y\n"
"float32 gyro_z\n"
"int64 pos_L\n"
"int64 pos_R\n"
"int64 spd_L\n"
"int64 spd_R\n"
"float64 time\n"
;
  }

  static const char* value(const ::khepera_communicator::SensorReadings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.pos_L);
      stream.next(m.pos_R);
      stream.next(m.spd_L);
      stream.next(m.spd_R);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorReadings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::khepera_communicator::SensorReadings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::khepera_communicator::SensorReadings_<ContainerAllocator>& v)
  {
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "pos_L: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pos_L);
    s << indent << "pos_R: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pos_R);
    s << indent << "spd_L: ";
    Printer<int64_t>::stream(s, indent + "  ", v.spd_L);
    s << indent << "spd_R: ";
    Printer<int64_t>::stream(s, indent + "  ", v.spd_R);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KHEPERA_COMMUNICATOR_MESSAGE_SENSORREADINGS_H
