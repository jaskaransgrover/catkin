// Generated by gencpp from file khepera_communicator/Acc.msg
// DO NOT EDIT!


#ifndef KHEPERA_COMMUNICATOR_MESSAGE_ACC_H
#define KHEPERA_COMMUNICATOR_MESSAGE_ACC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace khepera_communicator
{
template <class ContainerAllocator>
struct Acc_
{
  typedef Acc_<ContainerAllocator> Type;

  Acc_()
    : acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)  {
    }
  Acc_(const ContainerAllocator& _alloc)
    : acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)  {
  (void)_alloc;
    }



   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;





  typedef boost::shared_ptr< ::khepera_communicator::Acc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::khepera_communicator::Acc_<ContainerAllocator> const> ConstPtr;

}; // struct Acc_

typedef ::khepera_communicator::Acc_<std::allocator<void> > Acc;

typedef boost::shared_ptr< ::khepera_communicator::Acc > AccPtr;
typedef boost::shared_ptr< ::khepera_communicator::Acc const> AccConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::khepera_communicator::Acc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::khepera_communicator::Acc_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::khepera_communicator::Acc_<ContainerAllocator1> & lhs, const ::khepera_communicator::Acc_<ContainerAllocator2> & rhs)
{
  return lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::khepera_communicator::Acc_<ContainerAllocator1> & lhs, const ::khepera_communicator::Acc_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace khepera_communicator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::Acc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::Acc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::Acc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::Acc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::Acc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::Acc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::khepera_communicator::Acc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6eb6fe258b879869c2ff8d4de824a46c";
  }

  static const char* value(const ::khepera_communicator::Acc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6eb6fe258b879869ULL;
  static const uint64_t static_value2 = 0xc2ff8d4de824a46cULL;
};

template<class ContainerAllocator>
struct DataType< ::khepera_communicator::Acc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "khepera_communicator/Acc";
  }

  static const char* value(const ::khepera_communicator::Acc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::khepera_communicator::Acc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 acc_x\n"
"float32 acc_y\n"
"float32 acc_z\n"
;
  }

  static const char* value(const ::khepera_communicator::Acc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::khepera_communicator::Acc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Acc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::khepera_communicator::Acc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::khepera_communicator::Acc_<ContainerAllocator>& v)
  {
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KHEPERA_COMMUNICATOR_MESSAGE_ACC_H
