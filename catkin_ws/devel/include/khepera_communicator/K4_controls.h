// Generated by gencpp from file khepera_communicator/K4_controls.msg
// DO NOT EDIT!


#ifndef KHEPERA_COMMUNICATOR_MESSAGE_K4_CONTROLS_H
#define KHEPERA_COMMUNICATOR_MESSAGE_K4_CONTROLS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace khepera_communicator
{
template <class ContainerAllocator>
struct K4_controls_
{
  typedef K4_controls_<ContainerAllocator> Type;

  K4_controls_()
    : ctrl_W(0.0)
    , ctrl_V(0.0)  {
    }
  K4_controls_(const ContainerAllocator& _alloc)
    : ctrl_W(0.0)
    , ctrl_V(0.0)  {
  (void)_alloc;
    }



   typedef float _ctrl_W_type;
  _ctrl_W_type ctrl_W;

   typedef float _ctrl_V_type;
  _ctrl_V_type ctrl_V;





  typedef boost::shared_ptr< ::khepera_communicator::K4_controls_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::khepera_communicator::K4_controls_<ContainerAllocator> const> ConstPtr;

}; // struct K4_controls_

typedef ::khepera_communicator::K4_controls_<std::allocator<void> > K4_controls;

typedef boost::shared_ptr< ::khepera_communicator::K4_controls > K4_controlsPtr;
typedef boost::shared_ptr< ::khepera_communicator::K4_controls const> K4_controlsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::khepera_communicator::K4_controls_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::khepera_communicator::K4_controls_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::khepera_communicator::K4_controls_<ContainerAllocator1> & lhs, const ::khepera_communicator::K4_controls_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_W == rhs.ctrl_W &&
    lhs.ctrl_V == rhs.ctrl_V;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::khepera_communicator::K4_controls_<ContainerAllocator1> & lhs, const ::khepera_communicator::K4_controls_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace khepera_communicator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::K4_controls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::khepera_communicator::K4_controls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::K4_controls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::khepera_communicator::K4_controls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::K4_controls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::khepera_communicator::K4_controls_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::khepera_communicator::K4_controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8212eb98a5c89ce2b20829a1dc1970ce";
  }

  static const char* value(const ::khepera_communicator::K4_controls_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8212eb98a5c89ce2ULL;
  static const uint64_t static_value2 = 0xb20829a1dc1970ceULL;
};

template<class ContainerAllocator>
struct DataType< ::khepera_communicator::K4_controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "khepera_communicator/K4_controls";
  }

  static const char* value(const ::khepera_communicator::K4_controls_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::khepera_communicator::K4_controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ctrl_W\n"
"float32 ctrl_V\n"
;
  }

  static const char* value(const ::khepera_communicator::K4_controls_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::khepera_communicator::K4_controls_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_W);
      stream.next(m.ctrl_V);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct K4_controls_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::khepera_communicator::K4_controls_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::khepera_communicator::K4_controls_<ContainerAllocator>& v)
  {
    s << indent << "ctrl_W: ";
    Printer<float>::stream(s, indent + "  ", v.ctrl_W);
    s << indent << "ctrl_V: ";
    Printer<float>::stream(s, indent + "  ", v.ctrl_V);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KHEPERA_COMMUNICATOR_MESSAGE_K4_CONTROLS_H
